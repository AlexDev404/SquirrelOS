# SQUIRRELOS BUILD SCRIPT v0.51
# @updated_on: September 26, 2021 @ 1551 CST
# @author: Immanuel Garcia
# @desc: Builds SquirrelOS
# @comment: Will be improved upon later

# echo "argument1: $1"
# echo "argument2: $2"

# Set Build Dir Here!

build_dir="build2"
out_dir="out"
OS_NAME="MyOS"

function compile {
    
    # Create Build Directory
    mkdir $build_dir
    
    echo "Assembling Boot Files..."
    # BOOT
    # Assemble boot.s file
    as --32 boot/boot.s -o $build_dir/boot.o
    
    
    echo "Compiling Drivers..."
    
    gcc -m32 -c drivers/keyboard/keyboard.c -o $build_dir/keyboard.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c drivers/ports/ports.c -o $build_dir/ports.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c drivers/screen/screen.c -o $build_dir/screen.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c drivers/rtc/rtc.c -o $build_dir/rtc.o -std=gnu99 -ffreestanding -w -I.
    
    
    echo "Compiling LibC Include Directories..."
    # INCLUDE
    gcc -m32 -c include/assert/assert.c -o $build_dir/assert.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c include/math/math.c -o $build_dir/math.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c include/memory/memory.c -o $build_dir/memory.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c include/string/string.c -o $build_dir/string.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c include/exit.c -o $build_dir/exit.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c include/printf.c -o $build_dir/printf.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c include/utils.c -o $build_dir/utils.o -std=gnu99 -ffreestanding -w -I.
    
    
    echo "Compiling the kernel and its applications..."
    # KERNEL
    
    # KERNEL - APPLICATIONS
    
    gcc -m32 -c kernel/apps/apps.c -o $build_dir/apps.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c kernel/apps/cowsay/cowsay.c -o $build_dir/cowsay.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c kernel/apps/calculator/calculator.c -o $build_dir/calculator.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c kernel/apps/framebuffer/framebuffer.c -o $build_dir/framebuffer.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c kernel/apps/man/man.c -o $build_dir/man.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c kernel/apps/xgui/xgui.c -o $build_dir/xgui.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c kernel/apps/xander/xander.c -o $build_dir/xander.o -std=gnu99 -ffreestanding -w -I.
    
    # OLDSHELL
    # gcc -m32 -c kernel/shell.c -o shell.o -std=gnu99 -ffreestanding -w -I.
    
    gcc -m32 -c kernel/shell/lshell.c -o $build_dir/lshell.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c kernel/multiboot2.c -o $build_dir/multiboot2.o -std=gnu99 -ffreestanding -w -I.
    gcc -m32 -c kernel/panic.c -o $build_dir/panic.o -std=gnu99 -ffreestanding -w -I.
    
    # KERNEL ENTRY
    
    gcc -m32 -c kernel/kernel.c -o $build_dir/kernel.o -std=gnu99 -ffreestanding -w -I.
    
    cd $build_dir
    
    echo "Starting the linking of ALL object files..."
    
    ld -m elf_i386 -T ../boot/linker.ld \
    boot.o \
    keyboard.o \
    ports.o \
    screen.o \
    assert.o \
    math.o \
    memory.o \
    rtc.o \
    string.o \
    exit.o \
    printf.o \
    utils.o \
    panic.o \
    apps.o \
    cowsay.o \
    calculator.o \
    framebuffer.o \
    multiboot2.o \
    man.o \
    xgui.o \
    xander.o \
    lshell.o \
    kernel.o -o $OS_NAME.bin -nostdlib --allow-multiple-definition
    
    mv $OS_NAME.bin ../
    cd ..
    
    echo "Verifying the Output BIN file ($OS_NAME.BIN)"
    # Check $OS_NAME.bin file is x86 multiboot file or not
    grub-file --is-x86-multiboot $OS_NAME.bin
    
}

function check {
    # Build The ISO Disk Image File
    # Remove OutDir if it exists
    if [ -d "$out_dir" ];
    then
        echo "Removing Already Existing Output Directory"
        rm -r $out_dir
        mkdir $out_dir
    else
        mkdir $out_dir
    fi
    
    mkdir -p boot/grubconf/boot/grub
    
    echo "Building $OS_NAME..."
    cp $OS_NAME.bin boot/grubconf/boot/$OS_NAME.bin
    cp boot/grub.cfg boot/grubconf/boot/grub/grub.cfg
    grub-mkrescue -o $out_dir/$OS_NAME.iso boot/grubconf
}

function cleanup {
    # Remove Files Created While Building Source
    # rm -rf isodir
    rm -rf *.o
    rm -rf *.bin
    rm -r $build_dir
    rm -r boot/grubconf
}

function cleanall {
    # Remove Files Created While Building Source
    # rm -rf isodir
    numrem=0
    
    rm -rf *.o
    rm -rf *.bin
    
    if [ -d "$out_dir" ];
    then
        rm -r $out_dir
        let "numrem=numrem+1"
    fi
    
    if [ -d "$build_dir" ];
    then
        rm -r $build_dir
        let "numrem=numrem+1"
    fi
    
    if [ -d "boot/grubconf" ];
    then
        rm -r boot/grubconf
        let "numrem=numrem+1"
    fi
    echo "Removed a total of $numrem directories."
}

if [ "$1" = "clean" ]; then
    cleanall
else
    compile
    check
    cleanup
fi